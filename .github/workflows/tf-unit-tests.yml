name: 'Terraform Unit Tests'

on:
  push:

jobs:
  terraform-unit-tests:
    name: 'Terraform Unit Tests'
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend=false

    # Validate terraform files
    - name: Terraform Validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Perform security scan with Terrascan
    - name: Run Terrascan
      id: terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'terraform'
        iac_version: 'v14'
        policy_type: 'azure'
        only_warn: false # The action will only warn and not error when violations are found.
        #scm_token: ${{ secrets.TOKEN4 }} # If provided, Terrascan will use the provided access token to retrieve private repositories from your source code management system.
        verbose: true
        #find_vulnerabilities: true
        #sarif_upload: true
        #non_recursive:
        #iac_dir:
        #policy_path:
        #skip_rules: AC_AZURE_0389
        #config_path:
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: terrascan.sarif
        token: ${{ secrets.TOKEN3 }}
        
    
    # # Perform security scan with TFsec
    # - name: Set up Go
    #   uses: actions/setup-go@v3
    #   with:
    #     go-version: 'stable'
  
    # - name: Install tfsec
    #   run: go install github.com/aquasecurity/tfsec/cmd/tfsec@latest 
  
    # - name: Run tfsec
    #   run: tfsec

    # # Perform a security scan of the terraform code using checkov
    # - name: Run Checkov action
    #   id: checkov
    #   uses: bridgecrewio/checkov-action@master
    #   with: 
    #     framework: terraform

    # # Upload results to GitHub Advanced Security
    # - name: Upload SARIF file
    #   if: success() || failure()
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: results.sarif
    #     token: ${{ secrets.TOKEN2 }}
    #     category: checkov
